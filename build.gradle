import net.fabricmc.loom.task.RemapJarTask

plugins {
    id 'fabric-loom' version '0.4-SNAPSHOT'
    id 'maven-publish'
}

group = rootProject.maven_group
archivesBaseName = archives_base_name
version = mod_version

subprojects {
    apply plugin: 'fabric-loom'
    apply plugin: 'maven-publish'
}

allprojects {

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    version = rootProject.mod_version

    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            url 'http://maven.fabricmc.net/'
            name 'Fabric'
        }
        maven {
            name = 'JitPack'
            url = 'https://jitpack.io'
        }
    }

    // ensure that the encoding is set to UTF-8, no matter what the system default is
    // this fixes some edge cases with special characters not displaying correctly
    // see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
    tasks.withType(JavaCompile) {
        options.encoding = 'UTF-8'
    }

    //apply from: 'https://raw.githubusercontent.com/NerdHubMC/Gradle-Scripts/master/scripts/fabric/publish/changelog.gradle'
    //apply from: 'https://raw.githubusercontent.com/NerdHubMC/Gradle-Scripts/master/scripts/fabric/publish/maven_base.gradle'

    dependencies {
        //to change the versions see the gradle.properties file
        minecraft "com.mojang:minecraft:${project.minecraft_version}"
        mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
        modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

        // Fabric API. This is technically optional, but you probably want it anyway.
        modApi "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

        compileOnly "com.google.code.findbugs:jsr305:3.0.2"
    }

    afterEvaluate {
        remapJar {
            input = file("${project.buildDir}/libs/$archivesBaseName-${version}-dev.jar")
            archiveName = "${archivesBaseName}-${version}.jar"
        }

        artifacts {
            //dev file: file("${project.buildDir}/libs/$archivesBaseName-${version}-dev.jar"), type: "jar", builtBy: jar
        }

        processResources {
            inputs.property "version", project.version

            from(sourceSets.main.resources.srcDirs) {
                include "fabric.mod.json"
                expand "version": project.version
            }

            from(sourceSets.main.resources.srcDirs) {
                exclude "fabric.mod.json"
            }
        }
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }
}

subprojects {
    publishing {
        publications {
            mavenJava(MavenPublication) {
                afterEvaluate {
                    artifact(file("${project.buildDir}/libs/$archivesBaseName-${version}.jar")) {
                        builtBy remapJar
                    }
                    artifact(sourcesJar) {
                        builtBy remapSourcesJar
                    }
                }
            }
        }
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact(file("${project.buildDir}/libs/$archivesBaseName-${version}.jar")) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
            pom.withXml {
                def depsNode = asNode().appendNode("dependencies")
                subprojects.each {
                    def depNode = depsNode.appendNode("dependency")
                    depNode.appendNode("groupId", it.group)
                    depNode.appendNode("artifactId", it.name)
                    depNode.appendNode("version", it.version)
                    depNode.appendNode("scope", "compile")
                }
            }
        }
    }
}

repositories {

}

dependencies {
    afterEvaluate {
        subprojects.each {
            compile project(path: ":${it.name}")
            include project("${it.name}:")
        }
    }
}
