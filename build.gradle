import net.fabricmc.loom.task.RemapJarTask

plugins {
	id 'fabric-loom' version '0.4-SNAPSHOT'
	id 'maven-publish'
}

group = rootProject.maven_group
archivesBaseName = rootProject.name.toLowerCase(Locale.ROOT)
version = mod_version

subprojects {
	apply plugin: 'fabric-loom'
	apply plugin: 'maven-publish'
}

allprojects {

	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8

	version = rootProject.mod_version

	// Adds a few utility methods like getProjectProperty
	apply from: 'https://raw.githubusercontent.com/NerdHubMC/Gradle-Scripts/master/scripts/utilities.gradle'

	sourceSets {
		api
	}

	repositories {
		mavenCentral()
		maven {
			url 'http://maven.fabricmc.net/'
			name 'Fabric'
		}
	}

	// ensure that the encoding is set to UTF-8, no matter what the system default is
	// this fixes some edge cases with special characters not displaying correctly
	// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
	tasks.withType(JavaCompile) {
		options.encoding = 'UTF-8'
	}

	jar {
		from(sourceSets.main.output) {
			include 'fabric.mod.json'
			expand 'version': project.version
		}
		from(sourceSets.main.output) {
			exclude 'fabric.mod.json'
		}
	}

	task sourcesJar(type: Jar, dependsOn: classes) {
		archiveClassifier = 'sources'
		from sourceSets.main.allSource
	}

	task apiJar(type: Jar, dependsOn: apiClasses) {
		archiveClassifier = 'api-dev'
		from sourceSets.api.allJava
		from(sourceSets.api.output) {
			include 'fabric.mod.json'
			expand 'version': project.version
		}
		from(sourceSets.api.output) {
			exclude 'fabric.mod.json'
		}
	}

	task remapApiJar(type: RemapJarTask, dependsOn: project.apiJar) {
		input = apiJar.archiveFile
		archiveClassifier = 'api'
		addNestedDependencies = false
	}

	task apiProdJar(type: Jar, dependsOn: project.remapApiJar) {
		archiveClassifier = 'api-prod'
		from(zipTree(remapApiJar.archiveFile)) {
			exclude '**/*.java'
			exclude '**/package-info.class'
		}
	}

	remapJar.dependsOn(apiProdJar)

	javadoc {
		source += sourceSets.api.allJava
	}

	apply from: 'https://raw.githubusercontent.com/NerdHubMC/Gradle-Scripts/master/scripts/fabric/publish/changelog.gradle'
	apply from: 'https://raw.githubusercontent.com/NerdHubMC/Gradle-Scripts/master/scripts/fabric/publish/maven_base.gradle'

	dependencies {
		//to change the versions see the gradle.properties file
		minecraft "com.mojang:minecraft:${project.minecraft_version}"
		mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
		modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

		// Fabric API. This is technically optional, but you probably want it anyway.
		modApi "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

		// Lazily evaluated callable returning a non-live (unlike a FileCollection) list of files
		sourceSets.api.compileClasspath += files({ sourceSets.main.compileClasspath.toList() })

		compile sourceSets.api.output
		include files(apiProdJar.archiveFile)

		compileOnly "com.google.code.findbugs:jsr305:3.0.2"
	}

	publishing {
		publications {
			mavenJava(MavenPublication) {
				artifact(remapApiJar) {
					classifier = 'api'
				}
				artifact(apiProdJar) {
					classifier = 'api-prod'
				}
			}
		}
	}
}

repositories {
	maven {
		name = 'JitPack'
		url = 'https://jitpack.io'
	}
}

dependencies {
	afterEvaluate {
		subprojects.each {
			compile project(path: ":${it.name}")
			include project("${it.name}:")
		}
	}
}
